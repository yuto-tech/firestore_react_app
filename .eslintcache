[{"/Users/kataokayuuto/Desktop/react-study/superchat/src/index.js":"1","/Users/kataokayuuto/Desktop/react-study/superchat/src/App.js":"2","/Users/kataokayuuto/Desktop/react-study/superchat/src/reportWebVitals.js":"3"},{"size":500,"mtime":1609680045300,"results":"4","hashOfConfig":"5"},{"size":2581,"mtime":1609684871569,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1609680045301,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"r561lt",{"filePath":"11","messages":"12","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Users/kataokayuuto/Desktop/react-study/superchat/src/index.js",[],["17","18"],"/Users/kataokayuuto/Desktop/react-study/superchat/src/App.js",["19"],"import React, { useRef, useState } from 'react';\nimport './App.css';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport {useAuthState} from 'react-firebase-hooks/auth';\nimport {useCollectionData} from 'react-firebase-hooks/firestore';\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyC4fbp-2oHaTeA5rfYW3eWlLUuydK4Qtls\",\n  authDomain: \"react-chat-a9b28.firebaseapp.com\",\n  projectId: \"react-chat-a9b28\",\n  storageBucket: \"react-chat-a9b28.appspot.com\",\n  messagingSenderId: \"62077204878\",\n  appId: \"1:62077204878:web:907c9b80cb722388e34cdf\",\n  measurementId: \"G-JSHQG7FS6J\"\n})\n\nconst auth = firebase.auth();\nconst firestore =  firebase.firestore();\n\nfunction App() {\n  const [user] = useAuthState(auth);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <SignOut />\n      </header>\n      <section>\n        {user ? <ChatRoom /> : <SignIn/>}\n      </section>\n    </div>\n  );\n}\n\nfunction SignIn(){\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n  return(\n    <button onClick={signInWithGoogle} >sign in with Google</button>\n  )\n}\n\nfunction SignOut(){\n  return auth.currentUser && (\n    <button onClick={() => auth.signOut()}>Sign Out</button>\n  )\n}\n\nfunction ChatRoom(){\n  const dummy = useRef();\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt').limit(25);\n  const [messages] = useCollectionData(query, { idField: 'id' });\n  const [formValue, setFormValue] = useState('');\n\n  const sendMessage = async(e)=>{\n    e.preventDefault();\n    const {uid, photoURL } = auth.currentUser;\n    await messagesRef.add({\n      text:formValue,\n      createdAt:firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    })\n    setFormValue('');\n    dummy.current.scrollIntoView({ behavior: 'smooth'});\n  }\n\n  return(<>\n    <main>\n      {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg}/>)}\n      <span ref={dummy}></span>\n    </main>\n    <div>\n      <form onSubmit={sendMessage}>\n        <input value={formValue} onChange={(e )=> setFormValue(e.target.value)} />\n        <button type='submit'></button>\n      </form>\n    </div>\n    </>)\n}\n\nfunction ChatMessage(props){\n  const { text, uid , photoURL } = props.message;\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return(\n    <div Classname= {`message ${messageClass}`}>\n      <img src ={photoURL} />\n      <p>{text}</p>\n    </div>\n  )\n}\n\nexport default App;\n","/Users/kataokayuuto/Desktop/react-study/superchat/src/reportWebVitals.js",[],["20","21"],{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","severity":1,"message":"27","line":92,"column":7,"nodeType":"28","endLine":92,"endColumn":30},{"ruleId":"22","replacedBy":"29"},{"ruleId":"24","replacedBy":"30"},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["31"],["32"],"no-global-assign","no-unsafe-negation"]